<?xml version="1.0"?>
<doc>
<assembly>
<name>
Aq-Dn
</name>
</assembly>
<members>
<member name="M:AqDn.DarcyFlow.#ctor(ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.Geodatabase.IFeatureClass,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Single,System.Single,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="dem">The raster representing the terrain elevation</param>
	<param name="wb">The polygon layer representing the locations of water bodies. If this is Nothing, then the water bodies processing will be disabled.</param>
	<param name="k">The hydraulic conductivity raster</param>
	<param name="porosity">The porosity raster</param>
	<param name="slope_zfactor">
 The Z factor for the slope calculation. If the horizontal units are the same as the vertical
 units of measurement, the Z factor should be 1.  If they are different, they should be changed
 to the appropritate value.  For example, if the horizontal units are meters and the vertical units
 are feet, the Z factor would be 0.3048 (1 foot = 0.3048 meters)
 </param>
	<param name="smoothing">The amount of smoothing to apply to the DEM</param>
	<param name="p_mag ">The path where the magnitude raster will be saved. Includes path, filename and extension (.img)</param>
	<param name="p_dir">The path where the direction raster will be saved.  Includes path, filename and extension (.img)</param>
	<param name="p_hydrgr">The path where the hydraulic gradient raster will be saved.  Includes path, filename and extension (.img)
 Pass in an empty string to disable output of the hydraulic gradient</param>
	<param name="outputIntermediateRasters">If true, saves output of intermediate calculations in the same directory as the output magnitude raster</param>
	<param name="fillsinks">if true, enables sink filling</param>
	<param name="p_smthDEM">If specified, outputs the smoothed DEM to the specified file (path and extension must be specified)</param>
	<remarks>
	</remarks>
</member><member name="M:AqDn.DarcyFlow.calculateDarcyFlow">
	<summary>
 Calculates the groundwater flow field with darcy's law.
 </summary>
	<returns>An array of raster datasets representing the final calculation. Nothing on error</returns>
	<remarks>
 The raster dataset will be save to the location specified in the constructor.  The return array
 consists of the magnitude velocity raster, direction velocity raster, and the smoothed DEM (if appliable),
 in that order.
 </remarks>
</member><member name="M:AqDn.DarcyFlow.fillsinks(ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.Geodatabase.IFeatureClass)">
	<summary>
 Fills in sinks and then superimposes the elevations that are overlain by the water bodies layer
 </summary>
	<param name="r">the smoothed input raster</param>
	<param name="r_orig">The unsmoothed version of the input raster. Only used when the waterbodies
 parameter is specified</param>
	<param name="waterbodies">the water bodes layer. if nothing, this parameter will be ignored</param>
	<remarks>
 After this function completes, the output raster will have the NoData value set to 
 the default NoData value, regardless of what value was set before (due to the mask and fill functions).  
 For float rasters this value is (approximately) -3.40282347E+38.
 http://www.nacs.uci.edu/rcs/gis/recipes/RASTER_NOTES.txt
 </remarks>
</member><member name="M:AqDn.DarcyFlow.smooth(ESRI.ArcGIS.DataSourcesRaster.IRaster2@)">
	<summary>
 smooths the given raster the number of times specified by m_smoothing
 </summary>
	<param name="r">The raster to smooth</param>
	<remarks>
 Smooths with a 7x7 averaging filter. This function throws exceptions which must be caught by the caller.
 </remarks>
</member><member name="M:AqDn.DarcyFlow.getHydrGradMag(ESRI.ArcGIS.DataSourcesRaster.IRaster2[],ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 computes sqrt(x^2 + y^2) for the two input rasters
 </summary>
	<param name="r">array of rasters. r(0) is the x component of the slope, r(1) is the y component</param>
	<param name="dr">the drop raster as calculated by SA FlowDirections.</param>
	<returns>The hydraulic gradient magnitude raster</returns>
	<remarks>In flat areas, the value of <paramref name="dr"></paramref> will be used instead of the
 calculated one.</remarks>
</member><member name="M:AqDn.DarcyFlow.flowdir(ESRI.ArcGIS.DataSourcesRaster.IRaster2@)">
	<summary>
 Calculates the flow directions using the SA tool FlowDirection
 </summary>
	<param name="r">the raster to calculate the directions of</param>
	<returns>An array of raster represeting the flow in one of 8 directions (first index), and 
 the percent drop raster (second index)</returns>
	<remarks></remarks>
</member><member name="M:AqDn.DarcyFlow.flowdir2(ESRI.ArcGIS.DataSourcesRaster.IRaster2[]@,ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Calculates flow direction based on partial x and partial y. 
 </summary>
	<param name="r">array containing partial x in the frist index and partial y in the second, locations 
 of flat areas in the third.
 The input rasters should have the same cell size, extent, projection etc.</param>
	<param name="rf">The raster used for flat areas.  When there is a flat area, the value of
 partial x and partial y will be replaced by the value of rf.  The values in rf should be in degrees clockwise from
 north</param>
	<returns>a raster representing the angle clockwise from north</returns>
	<remarks></remarks>
</member><member name="M:AqDn.DarcyFlow.slope2(ESRI.ArcGIS.DataSourcesRaster.IRaster2@)">
	<summary>
 Calculates the slope with a filter mask
 </summary>
	<param name="r">The input raster</param>
	<returns>Returns 4 rasters, partial x (Gx) partial y (Gy) and a raster representing the locations 
 of flat areas (unexpanded and expanded). index 0=Gx, 1=Gy, 2=unexpanded flat areas, 3=expanded 
 flat areas.
 </returns>
	<remarks>Many different filters can be used.  When used with the Sobel filter, this function
 returns Gx and Gx that when properly combined, give the same result as Slope and Aspect functions of spatial analyst</remarks>
</member><member name="M:AqDn.DarcyFlow.findFlatAreas(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Int32)">
	<summary>
 Finds areas that will be considered flat by the SA FlowDirection algorithm.
 THe flow direction algorithm considers a cell as flat when all of its eight
 neigbors have a higher or the same elvation as the cell in question.
 </summary>
	<param name="r">The input raster</param>
	<param name="bufferAround">The number of cells to expand the flat area by</param>
	<returns>An array of raster. The first index represents the original flat area and the second
 the expanded flat area</returns>
	<remarks></remarks>
</member><member name="M:AqDn.DarcyFlow.darcy(ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Calculates the magnitude of the Darcy flow
 By Yan:  This is pore velocity, but not the Darcy velocity.
 </summary>
	<param name="r_k">the hydraulic conductivity raster</param>
	<param name="r_n">the porosity raster</param>
	<param name="r_slp">the raster representing the slope</param>
	<remarks>
 All the input rasters should have the same extent, same number of rows and columns and same cell size
 </remarks>
</member><member name="T:AqDn.DarcyFlow">
	<summary>
 Calculates the seepage velocity
 </summary>
	<remarks>
 This class takes as input 3 rasters: the water table elevation raster, and two rasters
 representing the hydraulic conductivity K and the Porosity n.  The output is two rasters
 representing the magnitude and direction of flow for each input cell.  The direction is 
 in degrees with 0 degrees corresponding to North.
 </remarks>
</member><member name="M:AqDn.Utilities.DivRem(System.String,System.String,System.Double@)">
	<summary>
 Calculates the remainder of two doubles a/b and returns the quotient in an output parameter.    
 </summary>
	<param name="a">String representation of the numerator</param>
	<param name="b">String representation of the denominator</param>
	<param name="quotient">Ouput quotient</param>
	<returns>Remainder of a/b. NaN on error</returns>
	<remarks>Similar to the Math.DivRem function (with parameter and ouptut reversed)
 except it supports floating point numbers as well.  The input parameters are strings instead
 of doubles because if the inputs are given as Single, there will be an implicit conversion to a double, the number may change a small amount
 because of the conversion and as a result, the wrong answer will be returned.  By enconding the numbers as strings,
 the actual values are preserved. Note: an implicit conversion from number to string for the input parameters is OK (i.e.
 passing numbers instead of strings for a and b)</remarks>
</member><member name="M:AqDn.Utilities.checkExist(System.String)">
	<summary>
 Checks to see whether the given output file exists
 </summary>
	<param name="path">The name of the file to check</param>
	<returns>
 True if it exists. False otherwise
 </returns>
	<remarks>
 This function should be run before any processing is done, so that the user can correct
 any errors before the run begins.  For example if running a calculation as part
 of a batch, the batch function should call this method and see if any outputs exist.
 This is necessary because many ArcGIS functions give an error if the output exists.
 </remarks>
</member><member name="M:AqDn.Utilities.RunTool(ESRI.ArcGIS.Geoprocessor.IGPProcess,ESRI.ArcGIS.esriSystem.ITrackCancel)">
	<summary>
 Runs a tool from the ArcGIS toolbox
 </summary>
	<param name="process">The tool object</param>
	<param name="TC">Process cancellation. can be Nothing</param>
	<remarks>
 Example: Run the fill tool from spatial analyst
 <code>
 Imports ESRI.ArcGIS.SpatialAnalystTools
 
 'set up the tool parameters
 Dim filler As New Fill(m_dem.RasterDataset, "C:/GIS_tests/aq-dn-test/t")
 Utilities.RunTool(filler, Nothing)
 </code>
	</remarks>
</member><member name="M:AqDn.Utilities.ReturnMessages(ESRI.ArcGIS.Geoprocessor.Geoprocessor)">
	<summary>
  Function for returning the tool messages.
 </summary>
	<param name="gp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.createFeatureLayerFromShapeFile(System.String)">
	<summary>
 creates a feature layer from a given shapefile
 </summary>
	<param name="fullpath">The full path to the shapefile</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.createFeatureClassFromShapeFile(System.String)">
	<summary>
 Create a featureclass from a shapefile. Returns Nothing on error
 </summary>
	<param name="fullpath">path and file name with extension</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.createRasterLayerFromFile(System.String,System.String)">
	<summary>
 Creates a raster layer from a file
 </summary>
	<param name="fullpath">The full path (incl. file name and extension) of the raster to load</param>
	<param name="layername">The name of the layer to add the raster into</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.createRasterFromFile(System.String)">
	<summary>
 Loads a raster from the given file name (full path and name with extension).
 Returns Nothing on error
 </summary>
	<param name="fullpath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.createFeatureLayerFromFeatureClass(ESRI.ArcGIS.Geodatabase.IFeatureClass)">
	<summary>
 Creates a layer from an a feature class reference
 </summary>
	<param name="f">The FeatureClass object implementing IFeatureClass</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.createRasterLayerFromDataset(ESRI.ArcGIS.DataSourcesRaster.RasterDataset)">
	<summary>
 Adds the specified RasterDataset as a new layer into the active map
 </summary>
	<param name="r">The raster dataset to add</param>
	<remarks>
 If there is an error, an exception will be thrown.  If the datum and coordinate system
 of the raster don't match the destination, show a warning (to do)
 </remarks>
</member><member name="M:AqDn.Utilities.createRasterLayerFromRaster(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.String)">
	<summary>
 Creates a new raster data set and adds it to the active map
 </summary>
	<param name="r">The raster</param>
	<param name="path">The path (including the file name) where the dataset will be saved
 If not specified, the file will be named with a numerical file name appended to the dataset name.
 and will be saved in the same folder as the active document.</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.checkLayerSpatialReferences(System.Collections.Generic.List{ESRI.ArcGIS.Carto.ILayer},ESRI.ArcGIS.Carto.IMap)">
	<summary>
 Checks the list of given layers (feature or raster) to see if they have the same
 spatial reference compared to each other and compared to the data frame
 </summary>
	<param name="layers">a List of ILayer. The layers to compare</param>
	<param name="map">If supplied, represents the map that the layers to be checked belong to.
 All spatial references will also be checked with the spatial referene of the active data frame</param>
	<returns>True if the layers have the same spatial reference compared to each other and 
 to the data frame. false otherwise</returns>
	<remarks>This is necessary because ArcGIS has some bugs when running commands when
 the spatial references are different.  For example, when calculating the groundwater flow
 if the porosity raster has a different projection than all the other datasets, there
 will be an error when you try to run map calculator in the darcy() function "Unable to set
 Analysis window".  Another example is with some projections (e.g. FDEP Albers) if the data
 is different than the coordinate system of the data frame, you will get strange lines across
 the FlowDirection raster.</remarks>
</member><member name="M:AqDn.Utilities.getRasterNoDataValue(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Int32)">
	<summary>
 returns the NoData value of the given raster
 </summary>
	<param name="band">The band in the raster to get the value from</param>
	<returns>The NoData Value</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.fix_nodata(System.Single,ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Resets the NoData value of the m_dem raster to the given value
 </summary>
	<param name="newNoData">the new nodata value. should be a large negative number</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.replace_DEM_nodata(ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Replaces values less than -1000 with the raster's NoData value
 </summary>
	<param name="r">The input Raster</param>
	<remarks>
 This is necessary because some ArcGIS functions (e.g. convolution) don't ignore
 NoData values when they should, and end up including them in the calculation.
 -1000 was chosen because we are assuming that since all these calculations deal with elevations
 ,which should never be large negative numbers or slopes (which should be positive, in the downslope
 direction), or physical properties like porosity and hydraulic conductivity which can never be negative,
 this assumption is safe.
 </remarks>
</member><member name="M:AqDn.Utilities.replaceRasterVals(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Object[],System.Object)">
	<summary>
 Replaces all values contained in <paramref name="valsToReplace "/> with the value of <paramref name="replacewith"/>
	</summary>
	<param name="r"></param>
	<param name="valsToReplace"></param>
	<param name="replacewith"></param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.OpenScratchWorkspace">
	<summary>
 Opens a temporary workspace
 </summary>
	<returns>A temporary workspace, usually in the user's %temp% folder</returns>
	<remarks>The first time this function is called, a new workspace is created.
 subsequent calls return the same workspace.</remarks>
</member><member name="M:AqDn.Utilities.FeatureclassToRaster(ESRI.ArcGIS.Geodatabase.IFeatureClass,System.Single,ESRI.ArcGIS.Geodatabase.IGeoDataset,ESRI.ArcGIS.Geometry.ISpatialReference,System.String,System.String,System.Boolean)">
	<summary>
 Converts a feature class to a raster
 </summary>
	<param name="shp">The feature class to convert</param>
	<param name="cellsz">The output cell size</param>
	<param name="extent">An object supporting the IEnvelope interface (e.g. a Raster object).  
 If speficied, the output will be clipped to this extent.  This increases performance</param>
	<param name="spatialRefernce">The spatial reference that the output will use.  If not speficied
 the spatial refernce of the input is used</param>
	<param name="valueField">The name of the field to use for conversion. Default is the FID field</param>
	<param name="fmt">The format. Default is IMAGINE Image. Refer to the ArcObjects documentation for 
 additional formats. Note format MEM is not supported</param>
	<param name="outputToFile">If true, the raster will be output to file with the same file name as     
 the input feature class with the suffix _r.  The output folder will be the folder of the active
 ArcMap document.
 </param>
	<returns>The converted raster file.  Nothing on error</returns>
	<remarks>The values of the raster cells will correspond to the FID (OID) field of the input</remarks>
</member><member name="M:AqDn.Utilities.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
	<summary>
 Win32 API call SetWindowLong
 </summary>
	<param name="hWnd"></param>
	<param name="nIndex"></param>
	<param name="dwNewLong"></param>
	<returns></returns>
	<remarks>Used to set the owner of this program's main form to the ArcGIS window</remarks>
</member><member name="M:AqDn.Utilities.DeleteRaster(ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Attempts to delete an IMG raster and associated dataset from disk and memory.
 </summary>
	<param name="raster"></param>
	<remarks>Only IMAGINE Image rasters are supported at this time.<para></para><para>
 The input raster or any of its sub-objects must not have any references other
 than the ones pointed to by the <paramref name="raster"/> input variable.  If there are any
 other references, deletion of the dataset from disk will fail because a file handle will still
 be open.  If an error occurs, a message is printed to Trace.
 </para><para>This function should
 be called as few times as possible due to the garbage collection step</para>
	</remarks>
</member><member name="M:AqDn.Utilities.DeleteShapefileByName(System.String)">
	<summary>
 Deletes the specified shapefile
 </summary>
	<param name="fullpath">Full path to the shapefile (with extension)</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.DeleteFilesAndFolders(System.String,System.Int32,System.Int32@,System.Int32@,System.Single@,System.Single@)">
	<summary>
 Recursively deletes files and folders in the given folder.
 </summary>
	<param name="sPath">The folder in which all files will be deleted. This folder will not be deleted.
 only files and folders contained within</param>
	<param name="dp">Do not use.</param>
	<param name="fd">Do not use.</param>
	<param name="fnd">Do not use.</param>
	<param name="sz">Do not use.</param>
	<param name="sznd">Do not use.</param>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.DeleteFilesAndFoldersQuick(System.String,System.Int32,System.Int32@,System.Int32@)">
	<summary>
 Delete files and folders recursively. Don't read file size to increase speed.
 If a file or folder can't be deleted, it is ignored.
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.saveRasterToFile(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.String,System.Collections.Hashtable,System.String,System.Boolean,System.Boolean)">
	<summary>
 Saves the provided raster object to a file
 </summary>
	<param name="r">The raster to save</param>
	<param name="fullpath">The full path (including name and extesion) to save the raster to</param>
	<param name="l">An optional hashtable to which the fullpath will be added if the operation succeeds</param>
	<param name="fmt">The format. Default is IMAGINE Image. Refer to the ArcObjects documentation for 
 additional formats</param>
	<remarks>If saving fails, a message will be output to Trace and there will be no exceptions thrown</remarks>
</member><member name="M:AqDn.Utilities.createShapefile(System.String,System.String,ESRI.ArcGIS.Geodatabase.IFields2,System.Collections.Hashtable)">
	<summary>
 Creates a new shapefile
 </summary>
	<param name="name">Name of the file (no extension)</param>
	<param name="path">Path to save it to</param>
	<param name="fields">An array of fields</param>
	<param name="l">An optional hashtable where the path to the newly created file will be added to</param>
	<returns>The shapefile. Nothing on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.AddOutParamDatasetsToActiveMap(System.Collections.Hashtable)">
	<summary>
 Adds any raster datasets or feature datasets contained in the table to the active map
 </summary>
	<param name="params">The hashtable containing paramters names and values.</param>
	<remarks>Only parameters with key=RasterDataset or FeatureDataset will be added</remarks>
</member><member name="M:AqDn.Utilities.getCursor(ESRI.ArcGIS.Geodatabase.IFeatureClass,System.String,System.Boolean)">
	<summary>
 Gets a FeatureCursor given a feature class and a query
 </summary>
	<param name="table">The feature class to get the cursor to</param>
	<param name="query">The where clause</param>
	<returns>A feature cursor. Nothing or an exception on error</returns>
	<remarks>If there is an error reading the file, or the database cursor is locked
 an exception is thrown.  For any other errors, Nothing is returned</remarks>
</member><member name="M:AqDn.Utilities.getRasterSum(ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Calculates the total value of the sum of all the non-zero and non-NoData
 raster cells
 </summary>
	<param name="r">The raster where each cell's value will be summed to the total</param>
	<returns>-1 on error</returns>
	<remarks>Assumes all cell values are positive</remarks>
</member><member name="M:AqDn.Utilities.getRasterUniqueVals(ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 gets a list of the unique values in the raster (excluding nodata) and returns
 the results as a hashtable
 </summary>
	<param name="r"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Utilities.isRasterEmpty(ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Checks if a raster consists of NoData. Should not be used on large rasters
 </summary>
	<param name="r"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:AqDn.Utilities">
	<summary>
 Misc. utility functions
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.LayerTypes.GetUIDFromEnum(AqDn.LayerTypes.LayerType)">
	<summary>
 Use this to get the UID of the given layer type
 </summary>
	<param name="LayerType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:AqDn.LayerTypes">
	<summary>
 Used for the LayersComboBox right now, but can be used anytime the UID of a layer type is needed
 </summary>
	<remarks>
 The different layer GUID's and Interface's are:
 "{AD88322D-533D-4E36-A5C9-1B109AF7A346}" = IACFeatureLayer
 "{74E45211-DFE6-11D3-9FF7-00C04F6BC6A5}" = IACLayer
 "{495C0E2C-D51D-4ED4-9FC1-FA04AB93568D}" = IACImageLayer
 "{65BD02AC-1CAD-462A-A524-3F17E9D85432}" = IACAcetateLayer
 "{4AEDC069-B599-424B-A374-49602ABAD308}" = IAnnotationLayer
 "{DBCA59AC-6771-4408-8F48-C7D53389440C}" = IAnnotationSublayer
 "{E299ADBC-A5C3-11D2-9B10-00C04FA33299}" = ICadLayer
 "{7F1AB670-5CA9-44D1-B42D-12AA868FC757}" = ICadastralFabricLayer
 "{BA119BC4-939A-11D2-A2F4-080009B6F22B}" = ICompositeLayer
 "{9646BB82-9512-11D2-A2F6-080009B6F22B}" = ICompositeGraphicsLayer
 "{0C22A4C7-DAFD-11D2-9F46-00C04F6BC78E}" = ICoverageAnnotationLayer
 "{6CA416B1-E160-11D2-9F4E-00C04F6BC78E}" = IDataLayer
 "{0737082E-958E-11D4-80ED-00C04F601565}" = IDimensionLayer
 "{48E56B3F-EC3A-11D2-9F5C-00C04F6BC6A5}" = IFDOGraphicsLayer
 "{40A9E885-5533-11D0-98BE-00805F7CED21}" = IFeatureLayer
 "{605BC37A-15E9-40A0-90FB-DE4CC376838C}" = IGdbRasterCatalogLayer
 "{E156D7E5-22AF-11D3-9F99-00C04F6BC78E}" = IGeoFeatureLayer
 "{34B2EF81-F4AC-11D1-A245-080009B6F22B}" = IGraphicsLayer
 "{EDAD6644-1810-11D1-86AE-0000F8751720}" = IGroupLayer
 "{D090AA89-C2F1-11D3-9FEF-00C04F6BC6A5}" = IIMSSubLayer
 "{DC8505FF-D521-11D3-9FF4-00C04F6BC6A5}" = IIMAMapLayer
 "{34C20002-4D3C-11D0-92D8-00805F7C28B0}" = ILayer
 "{E9B56157-7EB7-4DB3-9958-AFBF3B5E1470}" = IMapServerLayer
 "{B059B902-5C7A-4287-982E-EF0BC77C6AAB}" = IMapServerSublayer
 "{82870538-E09E-42C0-9228-CBCB244B91BA}" = INetworkLayer
 "{D02371C7-35F7-11D2-B1F2-00C04F8EDEFF}" = IRasterLayer
 "{AF9930F0-F61E-11D3-8D6C-00C04F5B87B2}" = IRasterCatalogLayer
 "{FCEFF094-8E6A-4972-9BB4-429C71B07289}" = ITemporaryLayer
 "{5A0F220D-614F-4C72-AFF2-7EA0BE2C8513}" = ITerrainLayer
 "{FE308F36-BDCA-11D1-A523-0000F8774F0F}" = ITinLayer
 "{FB6337E3-610A-4BC2-9142-760D954C22EB}" = ITopologyLayer
 "{005F592A-327B-44A4-AEEB-409D2F866F47}" = IWMSLayer
 "{D43D9A73-FF6C-4A19-B36A-D7ECBE61962A}" = IWMSGroupLayer
 "{8C19B114-1168-41A3-9E14-FC30CA5A4E9D}" = IWMSMapLayer
 </remarks>
</member><member name="P:AqDn.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:AqDn.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:AqDn.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:AqDn.ParticleTracker.ParticleTracks">
	<summary>
 Returns the feature class containing the particle track(s)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.ParticleTracker.#ctor(ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.String,System.String,ESRI.ArcGIS.Geometry.ISpatialReference,ESRI.ArcGIS.Geometry.Point,System.Single,System.Int32)">
	<summary>
 Constructs a single point tracker
 </summary>
	<param name="r_mag">Input magnitude raster</param>
	<param name="r_dir">Input direction raster</param>
	<param name="r_wb">THe input raster representing the locations of the water boides. can be Nothing</param>
	<param name="out_track_shp">The name of the shapefile that will hold the particle tracks. Don't include the path</param>
	<param name="pt">The point to track</param>
	<param name="maxsteps">The maximum number of steps to take before stopping</param>
	<param name="out_track_path">Output folder for the shape file</param>
	<param name="spatialref">The spatial reference of the output shapefile.  Should be the same
 as the map frame spatial reference but can be different if desired</param>
	<param name="steplen">The size of the step (in map units) to take</param>
	<remarks>
 All data sets should have the same spatial reference as the active map.  The water bodies raster should have a value only 
 where water bodies are located. all other cells should have NoData
 </remarks>
</member><member name="M:AqDn.ParticleTracker.#ctor(ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.String,System.String,ESRI.ArcGIS.Geometry.ISpatialReference,ESRI.ArcGIS.Geodatabase.IFeatureClass,System.Single,System.Int32)">
	<summary>
 Constructs a tracker that tracks multiple points
 </summary>
	<param name="r_mag">Input magnitude raster</param>
	<param name="r_dir">Input direction raster</param>
	<param name="r_wb">Input water bodies raster. can be nothing</param>
	<param name="out_track_shp">The name of the shapefile that will hold the particle tracks. Don't include the path</param>
	<param name="points">A point feature class containing the starting points of the particle track.</param>
	<param name="maxsteps">The maximum number of steps to take before stopping</param>
	<param name="out_track_path">Output folder for the shape file</param>
	<param name="spatialref">The spatial reference of the output shapefile.  Should be the same
 as the map frame spatial reference but can be different if desired</param>
	<param name="steplen">The size of the step (in map units) to take</param>
	<remarks>
 All data sets should have the same spatial reference as the active map.  The water bodies raster should have a value only 
 where water bodies are located. all other cells should have NoData
 </remarks>
</member><member name="M:AqDn.ParticleTracker.init(ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.String,System.String,ESRI.ArcGIS.Geometry.ISpatialReference,System.Single,System.Int32,ESRI.ArcGIS.Geometry.Point,ESRI.ArcGIS.Geodatabase.IFeatureClass)">
	<summary>
 initializes a new particle tracker
 </summary>
</member><member name="M:AqDn.ParticleTracker.createNewShapefile">
	<summary>
 Creates the shapefile that will store the particle paths
 </summary>
	<returns>True on success false on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.ParticleTracker.tracksingle(ESRI.ArcGIS.Geometry.Point,System.Int32)">
	<summary>
 tracks a path given a point.
 </summary>
	<param name="pt">The point where the path will begin</param>
	<param name="id">The ID that will be assigned to each segment in the path</param>
	<returns>True on OK. False on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.ParticleTracker.track">
	<summary>
 Begins the tracking.  After it is complete, the feature class will be available from
 the ParticleTracks property
 </summary>
	<returns>True on success, false on error</returns>
	<remarks>
 If the class was constructed with the constructor that takes a single point, then just that point
 will be tracked.  
 If the class was constructed with the constructor that takes a feature class of points, then each
 point will be tracked.
 </remarks>
</member><member name="T:AqDn.ParticleTracker">
	<summary>
 Used by the particle track functionality of the program
 </summary>
	<remarks>This class implements the particle tracking functionality.
 After initializing the particle tracker via the constructor, tracking is initiated by calling
 the track() function. Tracking can be cancelled by the cancelTrack() function.  After tracking
 is finished, the feature class containing the paths is available via the ParticleTracks property.
 Note that this class can only be used to track the point(s) given in the constructor. To track a different
 point(s) a new instance of the class must be constructed.
 </remarks>
</member><member name="M:AqDn.DomenicoRobbinsModified2D_VD.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,AqDn.DomenicoRobbinsModified2D_VD.DispersivityMethod)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="w">Longitudinal Dispersivity scaling factor</param>
	<param name="Dy_Dx">Ratio of tranverse horizontal dispersivity to longitudinal, Dy/Dx</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="v">The value of advection velocity (seepage velocity)</param>
	<param name="t">Time at which the plume is evaluated</param>
	<param name="method">The method to use for dispersivity calculation. Use the DispersivityMethod enum to select</param>
	<remarks>All units must be consistent.  I.e. if the velocity is given in m/day, t should also be 
 in days and source dimensions in meters.</remarks>
</member><member name="T:AqDn.DomenicoRobbinsModified2D_VD">
	<summary>
 Implements a 2D version of the Modified Domenico Robbins solution in the form given by eq (13)
 in Srinivasan et al. (2007) along with a variable longitudinal (and transverse) dispersivities
 based on the distance to the reference point along the plume.  Two methods are implemented (set via the
 constructor): The method of Pickens and Grisak (1981) and Xu and Eckstein (1995)
 </summary>
	<remarks>Dy is set to 0.1Dx</remarks>
</member><member name="T:AqDn.MainForm.validator">
	<summary>
 A generic delegate function used for form validation
 </summary>
	<remarks>
 When it comes time to validate the form, we can use a loop to loop through all defined
 validators.  Each control will have an associated validation function which is added to this
 list on form load.  The validation function is separate from the validation event handler
  so we can use it from a Control's
 validated event (for the ErrorProvider) or called from a function that validates the whole form.
 </remarks>
</member><member name="F:AqDn.MainForm.myTraceListener">
	<summary>
 the trace listener object.
 </summary>
	<remarks>
 Should be set either in the class constructor or by the instantiator of this class.  This is used
 to be able to properly unload the trace listener when this form closes (instead of waiting for ArcGIS
 to unload the object).  This avoids problems with multiple instances being run, e.g. closing the app
 and running it again.
 </remarks>
</member><member name="T:AqDn.MainForm">
	<summary>
 The main program form
 </summary>
	<remarks>
 This class is split up into several partial classes to modularize the code functionality.  For example, 
 all the functionality in each tab is separated into a separate class. To the compiler, these partial classes
 are treated as a single class.
 </remarks>
</member><member name="P:AqDn.IAnalyticalFunction4D.t">
	<summary>
 represents the fixed time at which the solution is evaluated
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.IAnalyticalFunction4D.eval(System.Single,System.Single,System.Single)">
	<summary>
 Evaluates the function.    
 </summary>
	<param name="x"></param>
	<param name="y"></param>
	<param name="z"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:AqDn.IAnalyticalFunction4D">
	<summary>
 Defines an interface to evaluate functions of 4 variables: x, y, z and time
 </summary>
	<remarks>Used for the transport calculation.  All functions that use this interface 
 must be symmetric at least in the y and z dimensions AND be convex!!!</remarks>
</member><member name="T:AqDn.RasterPixelTypes.RasterPixelType">
	<summary>
 RasterPixelTypes= rstPixelType Constants
 </summary>
	<remarks>
PT_UNKNOWN 	-1 	Pixel values are unknown.
PT_U1 	0 	Pixel values are 1 bit.
PT_U2 	1 	Pixel values are 2 bits.
PT_U4 	2 	Pixel values are 4 bits.
PT_UCHAR 	3 	Pixel values are unsigned 8 bit integers.
PT_CHAR 	4 	Pixel values are 8 bit integers.
PT_USHORT 	5 	Pixel values are unsigned 16 bit integers.
PT_SHORT 	6 	Pixel values are 16 bit integers.
PT_ULONG 	7 	Pixel values are unsigned 32 bit integers.
PT_LONG 	8 	Pixel values are 32 bit integers.
PT_FLOAT 	9 	Pixel values are single precision floating point.
PT_DOUBLE 	10 	Pixel values are double precision floating point.
PT_COMPLEX 	11 	Pixel values are complex.
PT_DCOMPLEX 	12 	Pixel values are double precision complex.
 </remarks>
</member><member name="M:AqDn.RasterPixelTypes.GetPixelType(System.Int32)">
	<summary>
 Returns the string representing the given pixel type
 </summary>
	<param name="t">A pixel type corresponding to one of the valid values</param>
	<returns>The string representing the value of the given pixel type.</returns>
	<remarks></remarks>
</member><member name="T:AqDn.RasterPixelTypes">
	<summary>
 A List of raster pixel types. 
 </summary>
	<remarks>Used by LayerInfo currently.</remarks>
</member><member name="M:AqDn.DomenicoRobbinsSS2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="Dx">Dispersivity longitudinal</param>
	<param name="Dy">Dispersivity transverse horizontal</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="v">The value of advection velocity to use</param>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoRobbinsSS2D">
	<summary>
 Implements the steady state Domenico Robbins solution in the form given by eq (6)
 in Gutierrez-Neri et. al. (2009)
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.SumMosaicOperator">
	<summary>
 A custom mosaic operator to combine the plume rasters into a single raster.  Used in Transport.CreatePlumeRaster
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.ModuleRunRemote.#ctor">
	<summary>
 the constructor called by remoting
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.ModuleRunRemote.#ctor(System.Object)">
	<summary>
 The constructor called by Mainform
 </summary>
	<param name="f"></param>
	<remarks></remarks>
</member><member name="P:AqDn.ModuleRunRemote.Indent">
	<summary>
 Used by the 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ModuleRunRemote.CancelChannelURI">
	<summary>
 called by the transport wrapper after inizialization to set the channel
 that we should look for if we want to cancel the operation
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not implemented</remarks>
</member><member name="P:AqDn.ModuleRunRemote.InParams">
	<summary>
 params that the wrapper will retrieve
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ModuleRunRemote.OutParams">
	<summary>
 Output params that the wrapper will set
 </summary>
	<value></value>
	<returns>The output parameters. If there are none the hash table will be empty</returns>
	<remarks></remarks>
</member><member name="M:AqDn.ModuleRunRemote.TraceOutput(System.String,System.Int32)">
	<summary>
 Receives trace messages forwarded by the wrapper
 </summary>
	<param name="msg">The message</param>
	<param name="indentlevel">The indent level the message should be at</param>
	<remarks></remarks>
</member><member name="M:AqDn.ModuleRunRemote.CalculationComplete(System.String)">
	<summary>
 Called by the wrapper to inform that the calculation is complete
 </summary>
	<param name="msg">return message</param>
	<remarks></remarks>
</member><member name="M:AqDn.ModuleRunRemote.WrapperProcessTerminated(System.String)">
	<summary>
 Called by the bootstrapper to notify us that the transport process has terminated
 </summary>
	<param name="msg"></param>
	<remarks></remarks>
</member><member name="T:AqDn.ModuleRunRemote">
	<summary>
 This class is instantiated into the Remoting server's process. It receives communications
 from the Remoting client (output data and notifications of when the wrapper has terminated)
 from a RemotingBootstrapper object.
 It also sends data to the client in the form of InParams which are the parameters
 required by the particular module being executed by the RemotingBootstrapper. The
 InParams and OutParams are accessed by the Wrapper directly and not through the 
 Bootstrapper.
 </summary>
	<remarks>This object must not be destroyed before the Wrapper has fully exited</remarks>
</member><member name="M:AqDn.DomenicoRobbins2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="Dx">Dispersivity longitudinal</param>
	<param name="Dy">Dispersivity transverse horizontal</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="v">The value of advection velocity to use</param>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoRobbins2D">
	<summary>
 Implements the Domenico Robbins solution in the form given by eq (4)
 in Gutierrez-Neri et. al. (2009)
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.DomenicoRobbinsSSDecay2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="Dx">Dispersivity longitudinal</param>
	<param name="Dy">Dispersivity transverse horizontal</param>
	<param name="k">The first order rate constant to use for nitrate decay</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="v">The value of advection velocity to use</param>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoRobbinsSSDecay2D">
	<summary>
 Implements a steady state version of equation (12) in Srinivasan et al (2007)
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.DomenicoRobbins">
	<summary>
 3D Domenico solution in the form given by eq (3) in Gutierrez-Neri et. al. (2009)
 Spreading is only in the -'ve z direction as given by Fig 3a in Domenico and Robbins 1985
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.DomenicoRobbinsSS">
	<summary>
 3D steady state Domenico Robbins solution in the form given by eq (5)
 in Gutierrez-Neri et. al. (2009)
 </summary>
	<remarks>Travel time parameter will be ignored</remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.DomenicoRobbins2D">
	<summary>
 2D Domenico solution in the form given by eq (4) in Gutierrez-Neri et. al. (2009)
 </summary>
	<remarks>Depth of source plane (Z) and vertical dispersivity (Dz) will be ignored</remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.ModifiedDomenico2D">
	<summary>
 2D version of the Modified Domenico Robbins solution in the form given by eq (13)
 in Srinivasan et al. (2007)
 </summary>
	<remarks>Depth of source plane (Z) and vertical dispersivity (Dz) will be ignored</remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.VD_ModifiedDomenico2D_PG">
	<summary>
 2D Modified Domenico solution in the form given by eq (13)
 in Srinivasan et al. (2007) along with a variable longitudinal (and transverse) dispersivities
 based on the method of Pickens and Grisak (1981)
 </summary>
	<remarks>
 Depth of source plane (Z), longitudinal (Dx), horizontal (Dy) and vertical dispersivity (Dz) will be ignored.
 Dy=0.1*Dx.
 The use of these variable dispersivity methods is questionable since they have not been well
 justified in the literature
 </remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.VD_ModifiedDomenico2D_XE">
	<summary>
 2D Modified Domenico solution in the form given by eq (13)
 in Srinivasan et al. (2007) along with a variable longitudinal (and transverse) dispersivities
 based on the method of Xu and Eckstein (1995)
 </summary>
	<remarks>
 Depth of source plane (Z), longitudinal (Dx), horizontal (Dy) and vertical dispersivity (Dz) will be ignored.
 Dy=0.1*Dx.
 The use of these variable dispersivity methods is questionable since they have not been well
 justified in the literature
 </remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.DomenicoRobbinsSS2D">
	<summary>
 2D version of the steady state Domenico solution as given by eq (6) in Gutierrez-Neri et al.
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.SolutionTypes.SolutionType.DomenicoRobbinsSSDecay2D">
	<summary>
 2D steady state solution of the domenico solution as given by eq (12) in Srinivasan et al.
 </summary>
	<remarks>Includes first order decay</remarks>
</member><member name="T:AqDn.SolutionTypes.SolutionType">
	<summary>
 A list of available analytical solutions. The default solution is the ModifiedDomenico2D
 </summary>
	<remarks>All solution types with a negative value represent steady state solutions
 All solution types that are even represent 3D solutions. Odd are 2D. All types with
 |value|&gt;=100 are solutions with decay</remarks>
</member><member name="M:AqDn.SolutionTypes.is3D(AqDn.SolutionTypes.SolutionType)">
	<summary>
 Tests the given solution type to see if it is 3D
 </summary>
	<param name="type">The type to check</param>
	<returns>True if 3D, false otherwise</returns>
	<remarks></remarks>
</member><member name="M:AqDn.SolutionTypes.is2D(AqDn.SolutionTypes.SolutionType)">
	<summary>
 Tests the given solution type to see if it is 2D
 </summary>
	<param name="type">The type to check</param>
	<returns>True if 2D, false otherwise</returns>
	<remarks></remarks>
</member><member name="M:AqDn.SolutionTypes.isSteadyState(AqDn.SolutionTypes.SolutionType)">
	<summary>
 Tests the given solution type to see if it is steady state
 </summary>
	<param name="type">The type to check</param>
	<returns>True if it is, false otherwise</returns>
	<remarks></remarks>
</member><member name="T:AqDn.SolutionTypes">
	<summary>
 Solution types for the transport solver.  Also includes methods to determine whether a given
 solution type is 2D, 3D or steady state.
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.LayersComboBox.Populate(ESRI.ArcGIS.Carto.IMap,AqDn.LayerTypes.LayerType,ESRI.ArcGIS.Geometry.esriGeometryType,System.Text.RegularExpressions.Regex)">
	<summary>
 Populate the dropdown list with MyLayer2 ojbects
 </summary>
	<param name="map">The map to get the layers from. Obtained from an MxDocument.Maps object</param>
	<param name="layerFilter">The type of layer to filter by. If no filter is specified, all layers 
 will be added.  The filter can be obtained from the LayerTypes class.
 </param>
	<param name="ShapeType">For shape files only (ignored for all others): selects the shape type, e.g. points only</param>
	<param name="nameMatch">Shows only the layers that have a name matching the specified regular expression</param>
	<remarks></remarks>
</member><member name="T:AqDn.LayersComboBox">
	<summary>
 This class extends the standard combo box to automatically populate itself with
 a list of layers
 </summary>
	<remarks>
 This control is placed on a form like a regular combobox control.  It behaves like a standard
 combobox control unless the populate method is called.  The populate method fills the combobox
 with a list of layers of the specified type from the given map.  Addionally, the dropdown style
 is fixed to a DropDownList style (the textbox can't be edited).   The comobobox can also contain
 other objects (e.g. strings) in conjuction with layer objects.
 </remarks>
</member><member name="M:AqDn.DomenicoRobbins.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="Dx">Dispersivity longitudinal</param>
	<param name="Dy">Dispersivity transverse horizontal</param>
	<param name="Dz">Dispersivity transverse vertical</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="Z">The Z dimension of the source plane</param>
	<param name="v">The value of advection velocity to use</param>
	<param name="t">Solution will be given for the specified time</param>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoRobbins">
	<summary>
 Implements the Domenico Robbins solution in the form given by eq (3) in Gutierrez-Neri et. al. (2009)
 Spreading is only in the -'ve z direction as given by Fig 3a in Domenico and Robbins 1985
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.DomenicoRobbinsSS.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="Dx">Dispersivity longitudinal</param>
	<param name="Dy">Dispersivity transverse horizontal</param>
	<param name="Dz">Dispersivity transverse vertical</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="Z">The Z dimension of the source plane</param>
	<param name="v">The value of advection velocity to use</param>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoRobbinsSS">
	<summary>
 Implements the steady state Domenico Robbins solution in the form given by eq (5)
 in Gutierrez-Neri et. al. (2009)
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MainForm.TRInit">
	<summary>
 initializes the components on this tab
 </summary>
	<remarks>Should be called from the forms load event</remarks>
</member><member name="M:AqDn.MainForm.TRPopulateDropdowns">
	<summary>
 Populates the drop down boxes with the appropriate layers
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MainForm.runTransp(System.Boolean)">
	<summary>
 used to start this module's calculations. 
 </summary>
	<param name="AddOutputToActiveMap">
 If true, adds the final output to the layers list of the active map.
 </param>
	<returns>If there are any errors in the form inputs or errors in calculation, returns false. 
 Else, returns true
 </returns>
	<remarks>
 This function validates all the form inputs and returns false if the validation fails. After 
 validation, the validated parameters are passes to the computation module.  If there are errors
 returned from the computation module, this function returns false.
 </remarks>
</member><member name="M:AqDn.MainForm.cancelTransport">
	<summary>
 Cancels the currently running plume calculation operation (if any).
 </summary>
	<remarks>Called by the abort button and the form close event</remarks>
</member><member name="M:AqDn.MainForm.ProcessTerminated(System.String)">
	<summary>
 Receives the notification from ModuleRunRemote that the transport process has terminated
 </summary>
	<param name="msg">system error code. 0 means no error</param>
	<remarks>This is meant to notify of process related errors (ie. the process was killed or any serious error)
 When the wrapper executable terminates normally, the error code is 0 regardless of the
 actual calculation result</remarks>
</member><member name="M:AqDn.MainForm.CalculationCompleted(System.String)">
	<summary>
 Receives the notification from TransportRunRemote that the calculation is complete
 </summary>
	<param name="msg">The message. If it is the empty string "", it means there are no
 error messages and the calculation completed sucessfully</param>
	<remarks>See <see cref="M:AqDn.MainForm.ProcessTerminated(System.String)"/></remarks>
</member><member name="M:AqDn.MainForm.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
	<summary>
 Event for the AppDomain AssemblyResolve event.
 </summary>
	<param name="sender"></param>
	<param name="args"></param>
	<returns></returns>
	<remarks>This event works around a .NET bug where the assembly isn't found when
 casting the remoted obeject to its type. The exception thrown when the bug occurs is "Unable to
 cast transparent proxy to type ‘Namespace.Type’"</remarks>
</member><member name="F:AqDn.ParticleTrackForm.myTraceListener">
	<summary>
 the trace listener object.
 </summary>
	<remarks>
 Should be set either in the class constructor or by the instantiator of this class.  This is used
 to be able to properly unload the trace listener when this form closes (instead of waiting for ArcGIS
 to unload the object).  This avoids problems with multiple instances being run, e.g. closing the app
 and running it again.
 </remarks>
</member><member name="T:AqDn.ParticleTrackForm.validator">
	<summary>
 A generic delegate function used for form validation
 </summary>
	<remarks>
 When it comes time to validate the form, we can use a loop to loop through all defined
 validators.  Each control will have an associated validation function which is added to this
 list on form load.  The validation function is separate from the validation event handler
  so we can use it from a Control's
 validated event (for the ErrorProvider) or called from a function that validates the whole form.
 </remarks>
</member><member name="P:AqDn.ParticleTrackForm.XCoord">
	<summary>
 Sets the value of the x-coord textbox
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Called by the onclick event raised the class ParticleTrack</remarks>
</member><member name="P:AqDn.ParticleTrackForm.YCoord">
	<summary>
 Sets the value of the y-coord textbox
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Called by the onclick event raised the class ParticleTrack</remarks>
</member><member name="M:AqDn.ParticleTrackForm.formValidate">
	<summary>
 Returns true if all the form controls validated successfully
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.ParticleTrackForm.track">
	<summary>
 Tracks particles.  A single or multiple particles are tracked depending on the form options
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.ParticleTrackForm.tracker(System.String,System.String,System.String,System.Double,System.Double,System.Double)">
	<summary>
 Tracks a particle from the given point to the nearest sink using the Darcy particle track tool
 </summary>
	<param name="rasterDir_path">The fully qualified path to the input direction raster</param>
	<param name="rasterMag_path">The fully qualified path to the input magnitude raster</param>
	<param name="trackfile_path ">The full path and name of the output tracking file and particle path output layer. </param>
	<param name="step_size">The step size to use in the integration</param>
	<param name="x">The starting x coordinate</param>
	<param name="y">The starting y coordinate</param>
	<remarks>Returns false if there was an error. True otherwise</remarks>
</member><member name="T:AqDn.ParticleTrackForm">
	<summary>
 The particle track tool window.  
 </summary>
	<remarks>This is the window that is shown when the Particle Track toolbar button is clicked.</remarks>
</member><member name="M:AqDn.GBCutout_LL.DllGetVersion(AqDn.GBCutout_LL.DLLVERSIONINFO@)">
	<summary>
 Import from comctl32.dll
 </summary>
	<param name="version"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.GBCutout_LL.IsThemeActive">
	<summary>
 Import from uxtheme.dll
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.GBCutout_LL.IsAppThemed">
	<summary>
 Import from uxtheme.dll
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.GBCutout_LL.IsVisualStylesEnabledRevisited">
	<summary>
 Determine whether visual styles are enabled
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.GBCutout_LL.UserControl2_Load(System.Object,System.EventArgs)">
	<summary>
 Control load event
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:AqDn.GBCutout_LL">
	<summary>
 Cutout for the groupbox on the transport module tab
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.WarpingMethods.WarpingMethod.Spline">
	<summary>
 Spline transform
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.WarpingMethods.WarpingMethod.Polynomial2">
	<summary>
 2nd order polynomial transform
 </summary>
	<remarks>Use when the spline transform don't give the desired results (shifting) or is too slow</remarks>
</member><member name="F:AqDn.WarpingMethods.WarpingMethod.Polynomial1">
	<summary>
 1st order polynomial transform
 </summary>
	<remarks>Use when plumes need to be shifted only (not curved).</remarks>
</member><member name="T:AqDn.WarpingMethods.WarpingMethod">
	<summary>
 The different transform methods available for use in the transport module
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.WarpingMethods">
	<summary>
 Enum class for the different transform methods in the transport calculations
 </summary>
	<remarks></remarks>
</member><member name="P:AqDn.Main.App">
	<summary>
 The currently running ArcMap application instance
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.Main.ActiveDoc">
	<summary>
 The currently loaded document.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.Main.ActiveDocFullName">
	<summary>
 The path and name of the currently loaded document.  If no document is loaded, N/A is returned.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.Main.ActiveDocPath">
	<summary>
 The full path without filename of the current document
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.Main.ActiveMap">
	<summary>
 The first map in the maps collection of the active document.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Main.init(ESRI.ArcGIS.ArcMapUI.IMxApplication2)">
	<summary>
 Initializes the ArcMap application reference
 </summary>
	<param name="ArcMapApplication">The reference to the application</param>
	<remarks>This function MUST be called before most classes in this namespace are used since many
 of those classes use this Main class to extract information from ArcMap. The only exceptions
 are the Core classes since they have been abstracted so that they are callable as stand alone
 libraries</remarks>
</member><member name="T:AqDn.Main">
	<summary>
 This class holds shared members that extract properties and values from the 
 main ArcMap reference that is passed in via the init() sub
 If running within ArcMap, init() must be called before anything else
 </summary>
</member><member name="M:AqDn.DomenicoRobbinsModified2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Constructor
 </summary>
	<param name="concInit">Concentration at source</param>
	<param name="Dx">Dispersivity longitudinal</param>
	<param name="Dy">Dispersivity transverse horizontal</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="v">The value of advection velocity to use</param>
	<param name="t">The solution time</param>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoRobbinsModified2D">
	<summary>
 Implements a 2D version of the Modified Domenico Robbins solution in the form given by eq (13)
 in Srinivasan et al. (2007)
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.Hemisphere">
	<summary>
 Test function for my function evaluator. Represents a solid hemisphere of a specified radius R
 centered at (0,0,0).  Time is ignored.  The base of the hemisphere sits on the y-z plane
 in the positive x direction only.
 </summary>
	<remarks>At every x,y,z this function evaluates to the specified value if the point is inside the sphere
 or 0 if it is outside</remarks>
</member><member name="P:AqDn.FlowPath.PlumeDist">
	<summary>
 The distance to the plume advection front, x=vt.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>For steady state problems, this will be equal to PathDist</remarks>
</member><member name="P:AqDn.FlowPath.PlumeTime">
	<summary>
 The time to the plume advection front.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>For steady state problems this is equal to PathTime</remarks>
</member><member name="P:AqDn.FlowPath.PathDist">
	<summary>
 The total length of the path.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.FlowPath.PathTime">
	<summary>
 The total time taken to travel the path
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.FlowPath.AddSegment(AqDn.FlowSegment)">
	<summary>
 used to build the list of flow segments used by calculatePath.
 </summary>
	<param name="seg">A flow segment of the flow path, Subsequent calls must correspond to
 a segment of the same flowpath, in order starting from the path origin</param>
	<remarks></remarks>
</member><member name="M:AqDn.FlowPath.getFlowPath">
	<summary>
 Returns the generated single polyline version of the flow path
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.FlowPath.calculatePath(System.Single)">
	<summary>
 Calculates path parameters Avgerage Porosity, Average Velocity, Initial Flow Direction Angle
 given a plume length and time.
 </summary>
	<param name="solutionTime">The time of the solution. For steady state solutions, this is -1</param>
	<remarks></remarks>
</member><member name="M:AqDn.FlowPath.angleFromPoints(ESRI.ArcGIS.Geometry.Point,ESRI.ArcGIS.Geometry.Point)">
	<summary>
 Calculates the angle clockwise from north made by the line defined by the points pt1 and pt2
 </summary>
	<param name="pt1">The starting point of the line</param>
	<param name="pt2">The ending point of the line</param>
	<returns>The angle in degrees</returns>
	<remarks></remarks>
</member><member name="P:AqDn.Transport.OutParams">
	<summary>
 after calculation is complete, holds the paths to any intermediate outputs
 If there were no outputs or the user selected not to output intermediate
 calculations, this list will be empty except for the full path of the _info file
 which is always present
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.#ctor(ESRI.ArcGIS.Geodatabase.IFeatureClass,ESRI.ArcGIS.Geodatabase.IFeatureClass,ESRI.ArcGIS.Geodatabase.IFeatureClass,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,AqDn.SolutionTypes.SolutionType,System.Int32,AqDn.WarpingMethods.WarpingMethod,System.Boolean,AqDn.PostProcessing.PostProcessingAmount,System.Boolean,System.String,AqDn.DomenicoSourceBoundaries.DomenicoSourceBoundary,System.Int32,System.Boolean,System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="ParticleTracks">The polyline class containing particle paths</param>
	<param name="Sources">A set of points containing the locations of the nitrate sources.
 Each point should also contain a field named N0_Conc indicating the nitrate concentration
 contributed by that source</param>
	<param name="Waterbodies">The target water bodies. If Nothing, then it will be assumed that
 no water bodies are present</param>
	<param name="ax">Dispersivity in the longitudinal direction.  If this parameter is less than zero,
  the value speficied for each source in the <paramref name="Sources"/> attribute table will be used. </param>
	<param name="ay">Dispersivity in the transverse horizontal direction.  If this parameter is less than zero,
  the value speficied for each source in the <paramref name="Sources"/> attribute table will be used. </param>
	<param name="az">Dispersivity in the transverse vertical direction.  If this parameter is less than zero,
  the value speficied for each source in the <paramref name="Sources"/> attribute table will be used. </param>
	<param name="Y">The width of the source plane</param>
	<param name="Z">The depth of the source plane</param>
	<param name="MeshCellSize_x">Mesh size in x</param>
	<param name="MeshCellSize_y">Mesh size in y</param>
	<param name="MeshCellSize_z">Mesh size in z</param>
	<param name="InitialConcentration">The initial concentration to use.  If this parameter is less than zero,
  the value speficied for each source in the <paramref name="Sources"/> attribute table will be used. </param>
	<param name="ThresholdConcentration">The plume cutoff concentration.</param>
	<param name="VolumeConversionFactor">For convenience. Since often the concentration of nitrate in the plumes
 is given with units of volume in Liters, this is the conversion factor from the units of cell volume
 to units of concentration volume.
 E.g. if the linear units of the Plumes raster are in meters , the
 resulting volume units would be m^3.  This conversion factor would then be used to specify the conversion from m^3
 to L, VolumeConversionFactor=1000 since 1 m^3 = 1000L.</param>
	<param name="SolutionTime">Time that will be solved for in the analytical solution. If not specified it means use the path travel time</param>
	<param name="DecayRateConstant">The rate coefficient to use (if using a solution that requires one).  If this parameter is less than zero,
  the value speficied for each source in the <paramref name="Sources"/> attribute table will be used. </param>
	<param name="PathID">The path ID to calculate. If not specified, all paths will be calculated</param>
	<param name="SolutionType">The analytical solution to use.  Depending on the solution chosen, some 
 parameters will be ignored.  E.g. if a 2D solution is chosen, Z and Dz will not be used. The default is the 2D Modified Domenico solution </param>
	<param name="WarpMethod">The warping method to use to map the plume to the path. Default is a spline warp</param>
	<param name="WarpCtrlPtSpac">The control point spacing to use for warping. A lower number will result
 in more control points, giving a better result at a cost of a slower computation.  Setting this number too high
 or too low may cause undesirable results.  The default is recommended unless problems are observed</param>
	<param name="WarpUseApprox">Use an approximate transform in order to increase computation speed.  The 
 difference in the result between the approximate and exact transform are minimal if the plume
 is large enough however the computation for the approximate transform is significantly faster.</param>
	<param name="PostProcessing">The level of post-processing</param>
	<param name="OutputIntermediateCalcs">Whether to output intermediate calculation rasters 
 (for debugging purposes.) The rasters will be output to the same folder as the input ParticleTracks file</param>
	<param name="OutputPlumesFile">The path (incl. file name and extension) of the location to save the output plumes raster. The info file
 will also be saved to the same location except with an _info suffix</param>
	<param name="DomenicoBoundary">Selects whether to interpret the <paramref name=" Z"/> parameter as either
 the Z dimension of the Domenico plane or as the Mass Input Load of the source plane.</param>
	<remarks>Depending of the selected solution type, parameters that are irrelevant will be ignored</remarks>
</member><member name="M:AqDn.Transport.#ctor(ESRI.ArcGIS.Geodatabase.IFeatureClass,ESRI.ArcGIS.Geodatabase.IFeatureClass,ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,AqDn.SolutionTypes.SolutionType,System.Int32,AqDn.WarpingMethods.WarpingMethod,System.Boolean,AqDn.PostProcessing.PostProcessingAmount,System.Boolean,System.String,AqDn.DomenicoSourceBoundaries.DomenicoSourceBoundary,System.Int32,System.Boolean,System.String,System.String)">
	<summary>
 This alternative constructor takes in an exisiting water bodies raster. This avoids having to convert
 a water bodies polygon feature class to raster if a raster already exists
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.cancelTransport">
	<summary>
 Attempts to cancel the entire transport calculation operation
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.CalculatePlumes">
	<summary>
 Calculates a plume for each individual source and combines them all into one raster.
 </summary>
	<returns>A raster containing a (planar) 2d cross section of all plumes. Nothing on error </returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.CalculatePlumeSingle(System.Int32)">
	<summary>
 Calculates a plume for a single particle path
 </summary>
	<param name="PathID">The ID of the path to calculate the plume for. Obtained from the particle tracks file</param>
	<returns>true on ok, false on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.snipTheTip(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Int32)">
	<summary>
 Used in calculatePlumes to truncate the plumes at the target water bodies.
 </summary>
	<param name="plumes"></param>
	<returns>The truncated raster on success. Nothing on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.getInputParams(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,ESRI.ArcGIS.Geometry.IGeometry@)">
	<summary>
 used in CalculatePlumeSingle to get the analytical solution parameters for the current contaminiant source
 This allows the user to have potentially different parameters for each source.  If the value is not present
 in the table, the value passed in the constructor is returned.
 </summary>
	<param name="pathID">The pathID that will be used to match against the FID
 in the m_sources point class</param>
	<param name="InitialConc">Output parameter representing the initial concentration</param>
	<param name="DecayCoeff">Output parameter representing the decay coefficient</param>
	<param name="DispL">Ouput parameter representing the longitudinal dispersivity</param>
	<param name="dispTH">Output parameter representing the transverse horizontal dispersivity.</param>
	<param name="srcpoint">Outputs a copy of the source location</param>
	<returns>True on OK, false on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.getInputParams1(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,ESRI.ArcGIS.Geometry.IGeometry@)">
	<summary>
 used in CalculatePlumeSingle to get the analytical solution parameters for the current contaminiant source
 This allows the user to have potentially different parameters for each source.  If the value is not present
 in the table, the value passed in the constructor is returned.
 </summary>
	<param name="pathID">The pathID that will be used to match against the FID
 in the m_sources point class</param>
	<param name="InitialConc">Output parameter representing the initial concentration</param>
	<param name="DecayCoeff">Output parameter representing the decay coefficient</param>
	<param name="DispL">Ouput parameter representing the longitudinal dispersivity</param>
	<param name="dispTH">Output parameter representing the transverse horizontal dispersivity.</param>
	<param name="srcpoint">Outputs a copy of the source location</param>
	<returns>True on OK, false on error</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.setupAnalyticalSoln(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 used in CalcualtePlumeSingle
 </summary>
	<param name="t_time"></param>
	<param name="avg_vel"></param>
	<param name="concInit"></param>
	<returns>Throws an exception if an invalid type has been specified</returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.getTargetPointsLocationsFromPath(System.Int32,ESRI.ArcGIS.Geometry.Point[],System.Single[],ESRI.ArcGIS.Geometry.Point[],System.Single[],System.Single,ESRI.ArcGIS.Geometry.IPointCollection4@)">
	<summary>
 given a path id and a list of plume control points (in map coordinates), this function generates target points
 along the specified path with ID=pathID.  The target points can then be used to warp the
 plume to the path.  The maxdist parameter is important. It determines the location of the end of the
 plume.  All points in the control points array will be mapped relative to the starting point and
 the point along the flow path located a distance of maxdist away from the start of the path.  For example,
 if the plume has length 10 units and the mid point of the plume is located 5 units from the start
 of the plume, if maxdist is set to 10, the end of the plume will be located 10 units along the
 curved flow path and the the midpoint of the plume 5 units.  If maxdist is set to a different value
 other than the plume length, it will effectively change the length of the mapped plume.  E.g. if 
 in the previous example, maxdist was set to 5, then the end point of the plume would be 5 units from
 the start of the flow path and the midpoint 2.5 units.  This effetively shrunk the plume from its 
 original length of 10 units to 5 units.
 </summary>
	<param name="pathid"></param>
	<param name="controlpts_bdy_frac">The control points on the boundary of the plume</param>
	<param name="controlpts_center_frac">The control points on the plume center line</param>
	<param name="maxdist">The maximum distance along the path. should be the plume length</param>
	<param name="controlpts">An output array containing the input control points as a single
 IPointCollection.  This array is used to mapp to the Target points</param>
	<returns>The target points to map to. nothing on error</returns>
	<remarks>the control points arrays must be sorted ascending</remarks>
</member><member name="M:AqDn.Transport.plumeCoordsToMapCoords(System.Collections.Generic.List{ESRI.ArcGIS.Geodatabase.Pnt},ESRI.ArcGIS.DataSourcesRaster.IRaster2)">
	<summary>
 Converts the specified points which are row and column indeces into the raster plumeraster to 
 map coordinates.
 </summary>
	<param name="ctrlpts"></param>
	<param name="plumeraster"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Transport.createNewPlumeDataShapefile(System.String)">
	<summary>
 creates a new shapefile in the same folder as the active map.  the spatial reference is
 set to be the same as the active map.
 </summary>
	<returns>True on success false on error</returns>
	<remarks></remarks>
</member><member name="T:AqDn.Transport">
	<summary>
 Calculates the contaminant plume given a set of particle paths 
 (generated from the particle tracking module)
 </summary>
	<remarks>
 First, a new instance of this class is created, initializing all the required parameters.  Then,
 CalculatePlumes is called which returns a Raster representing the concentrations of all the plumes in 
 the domain
 </remarks>
</member><member name="F:AqDn.DomenicoSourceBoundaries.DomenicoSourceBoundary.Specified_Input_Mass_Rate">
	<summary>
 The second box from the left on the main transport module will be treated as a specified
 input mass rate.  Z will be calculated automatically
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.DomenicoSourceBoundaries.DomenicoSourceBoundary.Specified_Z">
	<summary>
 The second box from the left on the main transport module will be treated as the value of the Z
 dimension of the Domenico solution.  The mass input rate will be calculated automatically
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoSourceBoundaries.DomenicoSourceBoundary">
	<summary>
 Available options for the Domenico source boundary
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.DomenicoSourceBoundaries">
	<summary>
 Enum class for the treatment of the Domenico source boundary
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.PostProcessing.PostProcessingAmount.None">
	<summary>
 No post processing is done to the plume. The plume will end at the water body with a
 cut that is perpendicular to the flow line.  This is the fastest method
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.PostProcessing.PostProcessingAmount.Medium">
	<summary>
 Some post processing will be done.  The shape of the plume at the water body will
 follow the shape of the water body boundary.  If the water bodies are not too complicated
 and all the sources are on one side of the water body, this method will produce adequate results
 with not much reduction in processing speed
 </summary>
	<remarks></remarks>
</member><member name="F:AqDn.PostProcessing.PostProcessingAmount.Full">
	<summary>
 When the medium level of post processing gives incorrect results (e.g. plumes extend past the
 target water body). Full processing is required.  This method is the slowest. It is much
 slower than the other two methods.
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.PostProcessing.PostProcessingAmount">
	<summary>
 The different levels of plume post processing
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.PostProcessing">
	<summary>
 The different post processing methods
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MyLayer2.#ctor(ESRI.ArcGIS.Carto.ILayer2)">
	<summary>
 Constructor
 </summary>
	<param name="lr">A layer object that implements the ILayer2 interface</param>
	<remarks></remarks>
</member><member name="M:AqDn.MyLayer2.ToString">
	<summary>
 The overriden ToString function that allows us to show the layer name in the combobox
 </summary>
	<returns>The name of the layer</returns>
	<remarks></remarks>
</member><member name="P:AqDn.MyLayer2.BaseLayer">
	<summary>
 Gets the actual layer object so we can work with it directly if needed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:AqDn.MyLayer2">
	<summary>
 Implements ILayer2. this class overrides the tostring function so that we can
 add layer objects directly into a combobox
 </summary>
	<remarks>This class stores an object of type ILayer2. An object of this class
 can then be stored directly in a combobox control and have the name of the layer 
 shown as the text</remarks>
</member><member name="M:AqDn.PopupInfo.#ctor(System.String,System.String)">
	<summary>
 Constructor.
 </summary>
	<param name="text">The text that will appear in the popup window</param>
	<param name="title">The title of the window</param>
	<remarks></remarks>
</member><member name="M:AqDn.PopupInfo.#ctor(ESRI.ArcGIS.Carto.RasterLayer,System.String)">
	<summary>
 Overloaded Constructor
 </summary>
	<param name="l">A raster layer to show the info of</param>
	<param name="title"></param>
	<remarks></remarks>
</member><member name="T:AqDn.PopupInfo">
	<summary>
 A popup window that can be used to display any text. 
 </summary>
	<remarks> To use it, create a new instance
 then when you are ready to show it, call the Show() method, optionally specifying the owning form.
 the window will then appear wherever the mouse was located when the class was initially constructed.
 This class is meant to be constructed within the click events of form controls.
 </remarks>
</member><member name="M:AqDn.OpenSaveDialog.#ctor(ESRI.ArcGIS.Catalog.IGxObjectFilter)">
	<summary>
 Constructor.
 </summary>
	<param name="ft">Shows only files of type defined by ft. Used for both the open and save dialog</param>
	<remarks>can use the FilterTypes class to get a new filter to pass to this constructor.</remarks>
</member><member name="M:AqDn.OpenSaveDialog.#ctor(ESRI.ArcGIS.Catalog.IGxObjectFilter,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="ft">Shows only files of type defined by ft. Used for both the open and save dialog</param>
	<param name="fn">The initial file name</param>
	<remarks>can use the FilterTypes class to get a new filter to pass to this constructor.</remarks>
</member><member name="M:AqDn.OpenSaveDialog.showSave(System.Windows.Forms.Form,System.String)">
	<summary>
 Shows an ARrcGIS modal save dialog.
 </summary>
	<param name="owner">The owner form</param>
	<param name="forceExtension">A string specifying the file extension to force.
 If an empty string is passed in, no extension will be forced.</param>
	<returns>A string representing the typed file name.  An empty string if the user clicked cancel.</returns>
	<remarks>The file format will be set to the IMAGINE image format</remarks>
</member><member name="M:AqDn.OpenSaveDialog.showOpen(System.Windows.Forms.Form)">
	<summary>
 Shows an ArcGIS modal open dialog
 </summary>
	<param name="owner">The owner form</param>
	<returns>A string representing the selected file.  An empty string is returned if the user clicked cancel.</returns>
	<remarks>
 Although the underlying ArcGIS library supports multiple selection, this function does not.
 This was done for simplicity.
 </remarks>
</member><member name="T:AqDn.OpenSaveDialog">
	<summary>
 Represents an ArcGIS open/save dialog
 </summary>
	<remarks>There is a bug in the GxDialog where the file icons won't appear if XP visual styles are enabled
 There is no solution (as of ArcGIS 9.3) other than to disable visual styles.
 </remarks>
</member><member name="M:AqDn.TraceOutput.#ctor(System.Windows.Forms.TextBox)">
	<summary>
 Constructor.
 </summary>
	<param name="destTxtBox">The texbox to which the output will be written.
 Delegates are used for thread safety according to Microsoft's documentation.
 </param>
	<remarks></remarks>
</member><member name="M:AqDn.TraceOutput.close">
	<summary>
 Used to properly unload the custom trace listener
 </summary>
	<remarks>This function should be called when the program exits.  It is necessary because
 arcgis won't immediately dispose of the application object, thereby leaving the trace listener
 active.  When a new call to trace.write is made, the old trace listener will try to write to
 a textbox that has been diposed already.  By unloading the trace listener when the main form closes,
 we will avoid this problem.
 </remarks>
</member><member name="T:AqDn.TraceOutput">
	<summary>
 this class displays calls to trace.write and trace.writeline in a given textbox
 this class is thread-safe.
 </summary>
	<remarks></remarks>
</member><member name="P:AqDn.Denitrification.OutParams">
	<summary>
 after calculation is complete, holds the file paths to any intermediate outputs
 If there were no outputs or the user selected not to output intermediate
 calculations, this list will be empty
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.Denitrification.#ctor(ESRI.ArcGIS.Geodatabase.FeatureClass,System.Single,System.Int32,System.Boolean)">
	<summary>
 Constructor
 </summary>
	<param name="PlumesInfo">A point class containing the information for each individual plume (generated from
 the transport module)
 </param>
	<param name="RiskFactor">A constant by which the resulting load will be multiplied</param>
	<param name="SourceID">If specified, only includes the source with the given PathID in the calculation</param>
	<param name="OutputIntermediateCalcs">Outputs any intermediate calculations for troubleshooting purposes.</param>
	<remarks></remarks>
</member><member name="M:AqDn.Denitrification.CalculateLoad(System.Boolean)">
	<summary>
 Calculates the load on the waterbody specified by the plumesInfo file
 </summary>
	<returns>Returns true on success, false on error</returns>
	<remarks>The results will be available in the OutParams after this function returns
 successfully</remarks>
</member><member name="T:AqDn.Denitrification.PlumeInfo">
	<summary>
 Interal class that represents the associated plume info
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.Denitrification">
	<summary>
 Calculates the (mass) load per unit time to the provided water bodies.
 </summary>
	<remarks>
 The calculation is carried out given 
 a map defining the location and shape of the combined contaminant plumes of all the
 provided sources.  The location and shape of the plumes is used in conjunction with
 a plume thickness obtained from the Z thickness of the source plane of the Domenico solution 
 to estimate a volume in which denitrification occurs.  This module only supports 2D steady state
 solutions of the Domenico model.
 <para>
 This module assumes all grounwater flow paths terminate at the same water body
 </para>
	</remarks>
</member><member name="P:AqDn.ContaminantPlume.SourceLocation">
	<summary>
 The source point feature corresponding to the plume origin (0,0,0)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.SolutionType">
	<summary>
 The analytical solution used to calculate this plume
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.ConcNext">
	<summary>
 The concentration at cell deltaX, ie. C(x=deltaX,y=0,z=0)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Used by the denitrificaiton module</remarks>
</member><member name="P:AqDn.ContaminantPlume.Porosity">
	<summary>
 The average porosity along the plume centerline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.MeshSzDX">
	<summary>
 The mesh size in the x direction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.MeshSzDY">
	<summary>
 The mesh size in the y direction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.MeshSzDZ">
	<summary>
 The mesh size in the z direction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DestinationWaterbodyID_Path">
	<summary>
 The FID of the water body that the flow path corresponding to this plume terminates at
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DestinationWaterbodyID_Plume">
	<summary>
 The FID of the water body that the plume terminates at.  If the plume length is &gt;= Path length
 then this will return the same number as <see cref="P:AqDn.ContaminantPlume.DestinationWaterbodyID_Path"/>. Else
 -1 is returned indicating this plume does not reach the water body
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.ConcInit">
	<summary>
 The initial concentration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.ConcThresh">
	<summary>
 The threshold concentration
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DecayCoeff">
	<summary>
 Decay coefficient
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DispL">
	<summary>
 Longitudinal dispersivity
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DispTH">
	<summary>
 Tranverse horizontal dispersivity
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DispTV">
	<summary>
 Transverse Vertical dispersivity
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeVolume">
	<summary>
 Plume volume
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.DirectionAngle">
	<summary>
 The angle wrt to grid north that the plume will initially take
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PathID">
	<summary>
 The associated pathID (septic tank id) to which the plume corresponds
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PathLength">
	<summary>
 The length of the path given by PathID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PathTime">
	<summary>
 The travel time of the path given by PathID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeTime">
	<summary>
 The time for which the plume was evaluated (if applicable)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeWidth">
	<summary>
 The width of the plume
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeWidthCells">
	<summary>
 The width of the plume given as the number of cells that span the plume width
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeHeight">
	<summary>
 Plume height
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeHeightCells">
	<summary>
 Plume height given as the number of cells that span the plume height
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeLength">
	<summary>
 Plume length.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is the same as PlumeLengthCells * MeshSize</remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeLengthCells">
	<summary>
 Plume length given as the number of cells that span the length of the plume.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AqDn.ContaminantPlume.PlumeTruncatedLength">
	<summary>
 The length of the plume up to the tip.  If the plume was truncated, at the water body,
  this length is the length up to the water body    
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.ContaminantPlume.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Single}}},System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,AqDn.SolutionTypes.SolutionType,ESRI.ArcGIS.Geometry.Point)">
	<summary>
 Constructor
 </summary>
	<param name="pathid">The PathID of particle path that this plume is associated with</param>
	<param name="pathlength">The length of the path given by PathID</param>
	<param name="sourceLocation">A point specifying the location of this plume's source</param>
	<param name="pathtime">Time total travel time of PathID</param>
	<param name="Y">The Y dimension of the source plane</param>
	<param name="Z">The Z dimension of the source plane.  This has no meaning if the plume is 2D</param>
	<param name="angle">The initial angle the plume takes clockwise wrt to north</param>
	<param name="plumecellarray">The plume.</param>
	<param name="plume_time">The time at which the plume was evaluated</param>
	<param name="plume_volume">The plume volume.  If the plume is 2D, this is the plume area</param>
	<param name="mesh_cell_size_x">The x mesh size the plume was evaluated on</param>
	<param name="mesh_cell_size_y">The y mesh size the plume was evaluated on</param>
	<param name="mesh_cell_size_z">The z mesh size the plume was evaluated on.  This has no meaning for a 2D plume</param>
	<param name="initialConcentration">The initial concentration of the source plane</param>
	<param name="concentrationThreshold">The cutoff concentration of the plume</param>
	<param name="avgVel">The seepage velocity of this plume</param>
	<param name="decay">The decay consntant of this plume</param>
	<param name="dispL">The longitudinal dispersivity of this plume</param>
	<param name="dispTH">The transverse horizontal dispersivity of this plume</param>
	<param name="dispTV">The transverse vertical dispersivity of this plume</param>
	<param name="EndingWaterBodyID">The FID of the water body that this plume terminates at. -1 if this plume doesn't terminate at a water body</param>
	<param name="nextConcentration">The concentration of the cell @x=<paramref name="mesh_cell_size_x"/> and y=0</param>
	<param name="plume_avg_porosity">The porosity used for this plume (for calculating denitrification)</param>
	<param name="plumeLength">The length of the plume (in map  units)</param>
	<param name="plumeTotalCells">The total number of cells in the plume</param>
	<param name="solutionType">The analytical solution used to calcuate the plume.</param>
	<remarks></remarks>
</member><member name="M:AqDn.ContaminantPlume.getPlumeSectXY0(System.Collections.Generic.List{ESRI.ArcGIS.Geodatabase.Pnt}@,System.Collections.Generic.List{ESRI.ArcGIS.Geodatabase.Pnt}@,System.Collections.Generic.List{System.Single}@,System.Collections.Generic.List{System.Single},System.Int32)">
	<summary>
 Returns an matrix containg a cross sectional slice of the plume on the (x,y,0) plane)
 </summary>
	<param name="controlpts_bdy">The control points defining the edge of the plume</param>
	<param name="controlpts_center">The control points defining the center of the plume</param>
	<param name="controlpts_bdy_frac">The fractional distance along the plume corresponding to each opposing 
 pair of boundary control points</param>
	<param name="controlpts_center_frac">The fractional distance along the plume corresponding
 to each control point along the plume center line</param>
	<param name="ControlPtSpacing">Adds a control point every ControlPtDensity number of cells.
 For example, the default value of 2 adds a control point every 2 cells along the plume.
 Note if you make the points too dense, the calculation will take longer.  The choice of this parameter
 depends on the choice of the plume mesh size, and the length of the plume i.e. if the mesh size is too coarse, you should select
 a smaller value for this parameter since there might not be enough cells in the plume for larger
 point densities.  In principle, larger values (i.e. points farther apart) will give faster calculation
 at the expense of less accuracy. </param>
	<returns>A 2D array containing the plume cross section.  On error, Nothing is returned and the 
 control point arrays will be empty </returns>
	<remarks>This function simultaneously calculates the control points and target points for 
 warping the plume</remarks>
</member><member name="M:AqDn.ContaminantPlume.deleteData">
	<summary>
 Deletes the plume to free memory
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.ContaminantPlume">
	<summary>
 Represents a contaminant plume
 </summary>
	<remarks>This class represents the solution of the analytical equation
 assuming the path is a straight line (no bends/segments)</remarks>
</member><member name="M:AqDn.MainForm.runDn(System.Boolean)">
	<summary>
 used to start this module's calculations. 
 </summary>
	<param name="AddOutputToActiveMap">
 If true, adds the final output to the layers list of the active map.
 </param>
	<returns>If there are any errors in the form inputs or errors in calculation, returns false. 
 Else, returns true
 </returns>
	<remarks>
 This function validates all the form inputs and returns false if the validation fails. After 
 validation, the validated parameters are passes to the computation module.  If there are errors
 returned from the computation module, this function returns false.
 </remarks>
</member><member name="M:AqDn.MainForm.cancelDenitrification">
	<summary>
 Cancels the currently running plume calculation operation (if any).
 </summary>
	<remarks>Called by the abort button and the form close event</remarks>
</member><member name="M:AqDn.MainForm.DNInit">
	<summary>
 initializes the components on this tab
 </summary>
	<remarks>Should be called from the forms load event</remarks>
</member><member name="M:AqDn.MainForm.DNPopulateDropdowns">
	<summary>
 Populates the drop down boxes with the appropriate layers
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.AdditionalOptionsAndParamsTR">
	<summary>
 Additional options and parameters for the transport module
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.FilterTypes.IsRaster(ESRI.ArcGIS.Catalog.IGxObjectFilter)">
	<summary>
 checks whether the argument is a raster type filter
 </summary>
	<param name="filter"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:AqDn.FilterTypes">
	<summary>
 Used for the GxDialog open/save dialog. This class can be used to return a given type of filter
 that can be used for the open/save dialog.  This is just a wrapper to make the filter names easier
 to remember.
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.erfc2(System.Double)">
	<summary>
 Calculate the complement of the error function erfc(x)=1-erf(x)
 </summary>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.erf2(System.Double)">
	<summary>
 Calculate the error function erf(x)
 </summary>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.erfc(System.Double)">
	<summary>
 Calculate erfc(x) via a lookup table.  The value returned corresponds to the closest
 available value in the table. No interpolation is done to increase running speed.
 Error will be introduced in the result, especially if the value of x is outside the 
 range contained in the table
 </summary>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.erf(System.Double)">
	<summary>
 Calculate erf(x) via a lookup table.
 </summary>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.macheps_sp">
	<summary>
 Machine epsilon for single precision
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.macheps_dp">
	<summary>
  Machine epsilon for double precision
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AqDn.MathSpecial.initErfcTable">
	<summary>
 Initializes the lookup table for the erf function. This function must be called before
 any calls to the erf function are made.  This is not necessary if using erf2
 </summary>
	<remarks>Calling this function is REQUIRED prior to calling erf and erfc.</remarks>
</member><member name="M:AqDn.MathSpecial.generateErfcTable">
	<summary>
 Generates a table of the complementary error function values and writes them to the binary file erf.bin
 This table is used by the erf and erfc functions of this class.  The table only needs to be
 generated once.  The erfc.bin file can then be placed as a resource
 </summary>
	<remarks></remarks>
</member><member name="T:AqDn.MathSpecial">
	<summary>
 Contains functions to calculate the values of erf and erfc among other things
 </summary>
	<remarks>This class can be accessed outside of the AqDn namespace</remarks>
</member><member name="M:AqDn.MainForm.PTinit">
	<summary>
 initializes the controls and validators in this tab
 </summary>
	<remarks>
 this function should be called from the form's Load event
 </remarks>
</member><member name="M:AqDn.MainForm.PTPopulateDropdowns">
	<summary>
 Populates the drop down boxes with the appropriate layers
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MainForm.cancelParticleTracking">
	<summary>
 Cancels the currently running particle tracking operation (if any)
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MainForm.runPT(System.Boolean)">
	<summary>
 used to start this module's calculations. 
 </summary>
	<param name="AddOutputToActiveMap">
 If true, adds the final output to the layers list of the active map.
 </param>
	<returns>If there are any errors in the form inputs or errors in calculation, returns false. 
 Else, returns true
 </returns>
	<remarks>
 This function validates all the form inputs and returns false if the validation fails. After 
 validation, the validated parameters are passes to the computation module.  If there are errors
 returned from the computation module, this function returns false.
 </remarks>
</member><member name="M:AqDn.MainForm.GWinit">
	<summary>
 initializes the controls and validators in this tab
 </summary>
	<remarks>
 this function should be called from the form''s Load event
 </remarks>
</member><member name="M:AqDn.MainForm.GWPopulateDropdowns">
	<summary>
 Populates the drop down boxes with the appropriate layers
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MainForm.cancelDarcyFlow">
	<summary>
  Cancels the currently running darcy flow operation (if any)
 </summary>
	<remarks></remarks>
</member><member name="M:AqDn.MainForm.runGW(System.Boolean)">
	<summary>
 used to start this module's calculations. 
 </summary>
	<param name="addtolayers">
 If true, adds the final output to the layers list of the active map.
 </param>
	<returns>If there are any errors in the form inputs or errors in calculation, returns false. 
 Else, returns true
 </returns>
	<remarks>
 This function validates all the form inputs and returns false if the validation fails. After 
 validation, the validated parameters are passes to the computation module.  If there are errors
 returned from the computation module, this function returns false.
 </remarks>
</member>
</members>
</doc>