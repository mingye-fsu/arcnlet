<?xml version="1.0"?>
<doc>
<assembly>
<name>
BatchTools
</name>
</assembly>
<members>
<member name="T:BatchTools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:BatchTools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:BatchTools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:BatchTools.ArcNLETc">
 <summary>
 Enables command line usage of ArcNLET
 </summary>
 <remarks></remarks>
</member>
<member name="M:BatchTools.ArcNLETc.getArgs(System.String)">
 <summary>
 Generate commandline arguments for testing purposes
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BatchTools.ArcNLETc.parseXY(System.String)">
 <summary> 
 Returns a list of points given the input string.  The input string must specify
 the points in UTM Zone 17N.
 </summary>
 <param name="out_XY"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BatchTools.ArcNLETc.readRasterXY(ESRI.ArcGIS.DataSourcesRaster.IRaster2,System.Collections.Generic.List{ESRI.ArcGIS.Geometry.Point},System.String)">
 <summary>
 Reads the values of the given raster at the specified points an outputs the results to the
 specified file
 </summary>
 <param name="r"></param>
 <param name="ptsXY"></param>
 <param name="outfile"></param>
 <remarks></remarks>
</member>
<member name="M:BatchTools.LicenseInitializer.LicenseMessage">
 <summary>
 A summary of the status of product and extensions initialization.
 </summary>
</member>
<member name="M:BatchTools.LicenseInitializer.ShutdownApplication">
 <summary>
 Shuts down AoInitialize object and check back in extensions to ensure
 any ESRI libraries that have been used are unloaded in the correct order.
 </summary>
 <remarks>Once Shutdown has been called, you cannot re-initialize the product license
 and should not make any ArcObjects call.</remarks>
</member>
<member name="M:BatchTools.LicenseInitializer.IsExtensionCheckedOut(ESRI.ArcGIS.esriSystem.esriLicenseExtensionCode)">
 <summary>
 Indicates if the extension is currently checked out.
 </summary>    
</member>
<member name="M:BatchTools.LicenseInitializer.AddExtensions(ESRI.ArcGIS.esriSystem.esriLicenseExtensionCode[])">
 <summary>
 Set the extension(s) to be checked out for your ArcObjects code. 
 </summary>
</member>
<member name="M:BatchTools.LicenseInitializer.RemoveExtensions(ESRI.ArcGIS.esriSystem.esriLicenseExtensionCode[])">
 <summary>
 Check in extension(s) when it is no longer needed.
 </summary>
</member>
<member name="P:BatchTools.LicenseInitializer.InitializeLowerProductFirst">
 <summary>
 Get/Set the ordering of product code checking. If true, check from lowest to 
 highest license. True by default.
 </summary>
</member>
<member name="P:BatchTools.LicenseInitializer.InitializedProduct">
 <summary>
 Retrieves the product code initialized in the ArcObjects application
 </summary>
</member>
<member name="T:BatchTools.TestHarness">
 <summary>
 Used for batch testing / processing of non-ui related stuff (ie. the core modules).  
 All inputs are hard coded. In order to use this test harness with 
 different inputs, the code needs to be modified.
 </summary>
 <remarks>When using this test harness, it is advisable to use the MyDebug build config
 instead of the regular Debug</remarks>
</member>
<member name="M:BatchTools.TestHarness.UA_project_generateFlowFields">
 <summary>
 Uncertainty Analysis Project
 generate a few flow fields using a different smoothing parameter for each one    
 </summary>
 <remarks></remarks>
</member>
<member name="M:BatchTools.TestHarness.UA_project_particleTrack">
 <summary>
 particle track using the flow fields generated by UA_project_generateFlowFields
 </summary>
 <remarks></remarks>
</member>
<member name="T:BatchTools.TraceOutputConsole">
 <summary>
 Adds color to console output from trace and debug.  Trace writes are shown in the normal colour while
 debug writes are shown in green.  All that is required is to create an instance of this class.
 </summary>
 <remarks>
 Creating an instance of this class will remove the default console trace listener and add a new
 trace listener to Trace (and by extension Debug since Trace and Debug share the same listeners (and indentaion))
 Calls to Trace.writeline will appear normal while calls to Debug.writeline will appear green.
 <para>When the code is compiled for release, all debug statements are deleted by the compiler.
 Even code contained within Debug.WriteLine (e.g. Debug.Writeline(Math.Sqrt(5)) will not execute</para>
 </remarks>
</member>
<member name="T:BatchTools.TraceOutputConsole.MyTextWriterTraceListener">
 <summary>
 Outputs Trace and Debug statements to console except Debug statements
 are coloured green
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
